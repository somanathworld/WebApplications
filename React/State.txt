Configuring State in Class Component


- State is defined at the time of initialization.
- It is configured in component constructor.
- In class component dervied class constructor must have a super call.
- State in class component is configure by implementing "state" object of
  "React.Component" base class.


Syntax:
   class  ComponentName  extends  React.Component
   {
          constructor(props) {
               super(props);
               this.state = {
     key : value
                }
          }
   }


 - State key can contain any type of value: Primitive or Non-Primitive.
 - You can access state with reference of key.

Syntax:
this.state.key


Ex:
import React from 'react';


export default class StateDemoComponent extends React.Component
{
    constructor(props){
        super(props);
        this.state = {
            title: 'Product Details',
            product: {
                Name: 'Nike Casuals',
                Price: 5600.44,
                Photo: 'images/shoe.jpg'
            },
            categories: ['Electronics', 'Footwear', 'Fashion']
        }
    }
    render(){
        return(
            <>
              <div className="container-fluid">
               <h2>{this.state.title}</h2>
               <dl>
                   <dt>Name</dt>
                   <dd>{this.state.product.Name}</dd>
                   <dt>Price</dt>
                   <dd>{this.state.product.Price}</dd>
                   <dt>Preview</dt>
                   <dd>
                       <img  src={this.state.product.Photo} alt="Preview" width="100" height="100"/>
                   </dd>
               </dl>
               <h3>Select a Category</h3>
               <select>
                   {
                       this.state.categories.map(category => 
                         <option>{category}</option>
                        )
                   }
               </select>
              </div>
            </>
        )
    }
}


Set Value into State Object:
=====================
- To set value into state object we have to use "setState()" of "React.Component" base.
- The default state of a class component is not accessible to any method in the class.
- You have to bind the methods with class in order to set state.
- Binding of method with class can be defined in various ways


a) Bind in the constructor
b) Bind in event handler

onKeyUp={this.MethodName.bind}


Note: Binding is required only when method is using state. It is not required for other DOM manipulations.


Syntax:  DOM Manipulations


   UpdateName(event){
        console.log(`Hello ! ${event.target.value}`);
    }




Syntax:  State 


   constructor()
   {
         this.UpdateName = this.UpdateName.bind(this);
   }




Ex:
import React from 'react';


export default class StateDemoComponent extends React.Component
{
    constructor(props){
        super(props);
        this.state = {
            UserName: ''
        }
        this.UpdateName = this.UpdateName.bind(this);
    }
    UpdateName(event){
        this.setState({
            UserName: event.target.value
        })
    }
    render(){
        return(
            <>
              <div className="container-fluid">
                 <h3>Register User </h3>
                 User Name: <input type="text" onKeyUp={this.UpdateName} />
                 <div>
                     <p>Hello ! {this.state.UserName} </p>
                 </div>
              </div>
            </>
        )
    }
}


Data Binding using State in Function Component
=====================================


Ex:
import { useState } from "react";


export default function StateDemoComponent()
{
    const [product, setProduct] = useState({Name:'', Price: 0, City: '', Stock: false})
    const [newProduct, setNewProduct] = useState({});
    function HandleNameChange(event){
        setProduct({
            Name: event.target.value,
            Price: product.Price,
            City: product.City,
            Stock: product.Stock
        })
    }


    function HandlePriceChange(event){
        setProduct({
            Name: product.Name,
            Price: event.target.value,
            City: product.City,
            Stock: product.Stock
        })
    }


    function HandleCityChange(event){
        setProduct({
            Name: product.Name,
            Price: product.Price,
            City: event.target.value,
            Stock: product.Stock
        })
    }


    function HandleStockChange(event){
        setProduct({
            Name: product.Name,
            Price: product.Price,
            City: product.City,
            Stock: event.target.checked
        })
    }




    function HandleRegisterClick(){
         setNewProduct({
             Name: product.Name,
             Price: product.Price,
             City: product.City,
             Stock: product.Stock
         })
    }




    return(
        <div className="container-fluid">
            <div className="row">
                <div className="col-3">
                   <h3>Register Product</h3>
                   <dl>
                       <dt>Name</dt>
                       <dd><input type="text" onKeyUp={HandleNameChange} className="form-control" /></dd>
                       <dt>Price</dt>
                       <dd><input type="text" onKeyUp={HandlePriceChange} className="form-control" /></dd>
                       <dt>Shipped To</dt>
                       <dd>
                           <select onChange={HandleCityChange} className="form-select">
                               <option>Delhi</option>
                               <option>Hyd</option>
                           </select>
                       </dd>
                       <dt>Stock</dt>
                       <dd className="form-switch">
                           <input type="checkbox" onChange={HandleStockChange} className="form-check-input" /> Available
                       </dd>
                   </dl>
                   <button onClick={HandleRegisterClick} className="btn btn-primary w-100">Register</button>
                </div>
                <div className="col-9">
                   <h3>Product Details</h3>
                   <dl>
                       <dt>Name</dt>
                       <dd>{newProduct.Name}</dd>
                       <dt>Price</dt>
                       <dd>{newProduct.Price}</dd>
                       <dt>Shipped To</dt>
                       <dd>{newProduct.City}</dd>
                       <dt>Stock</dt>
                       <dd>{(newProduct.Stock===true)?"Available":"Out of Stock"}</dd>
                   </dl>
                </div>
            </div>
        </div>
    )
}

Class Binding in React
===================
- Binding a CSS class to HTML element.
- You can binding CSS class with "className"  property




Syntax:
        <span  className="bi bi-house"> </span>



Style Binding React
===============
- Binding inline styles for HTML elements.
- It is done by using "style" property.






Syntax:
             <div  style={ {attributeName:value} } >


- You can't use css attributes directly, you have to configure as dynamic property using "camel case".




background-color : red
backgroundColor: 'red'
width: '200px'


- Multiple style attributes are defined as "JavaScript" object.





   <h2  style="background-color:red; color:yellow"> </h2>
   
    <h2  style={ {backgroundColor:'red', color:'yellow'} }>  </h2>




FAQ: Why we need style binding?
Ans:  It allows to change the styles for any element dynamically.
         React uses JSON object that comprises of dynamic styles.


        Syntax:
       const  [theme, setTheme] = useState({backgroundColor:'red', color:'white'});


        <div   style={theme}> </div>






Ex:  Dynamic Styles - Theme




import { useState } from "react";


export default function StateDemoComponent()
{
    const [product, setProduct] = useState({Name:'', Price: 0, City: '', Stock: false})
    const [newProduct, setNewProduct] = useState({});
    const [theme, setTheme] = useState({});


    function HandleNameChange(event){
        setProduct({
            Name: event.target.value,
            Price: product.Price,
            City: product.City,
            Stock: product.Stock
        })
    }


    function HandlePriceChange(event){
        setProduct({
            Name: product.Name,
            Price: event.target.value,
            City: product.City,
            Stock: product.Stock
        })
    }


    function HandleCityChange(event){
        setProduct({
            Name: product.Name,
            Price: product.Price,
            City: event.target.value,
            Stock: product.Stock
        })
    }


    function HandleStockChange(event){
        setProduct({
            Name: product.Name,
            Price: product.Price,
            City: product.City,
            Stock: event.target.checked
        })
    }




    function HandleRegisterClick(){
         setNewProduct({
             Name: product.Name,
             Price: product.Price,
             City: product.City,
             Stock: product.Stock
         })
    }


    function HandleThemeChange(event){
        if(event.target.checked) {
            setTheme({
                backgroundColor: 'black', 
                color: 'white'
            })
        } else {
            setTheme({
                backgroundColor: 'lightcyan',
                color: 'black'
            })
        }
    }




    return(
        <div className="container-fluid">
            <div className="row">
                <div className="col-3">
                   <div style={theme} className="p-4">
                   <div className="form-switch">
                       <input type="checkbox" onChange={HandleThemeChange} className="form-check-input" /> Dark Theme
                   </div>
                   <h3>Register Product</h3>
                   <dl>
                       <dt>Name</dt>
                       <dd><input type="text" onKeyUp={HandleNameChange} className="form-control" /></dd>
                       <dt>Price</dt>
                       <dd><input type="text" onKeyUp={HandlePriceChange} className="form-control" /></dd>
                       <dt>Shipped To</dt>
                       <dd>
                           <select onChange={HandleCityChange} className="form-select">
                               <option>Delhi</option>
                               <option>Hyd</option>
                           </select>
                       </dd>
                       <dt>Stock</dt>
                       <dd className="form-switch">
                           <input type="checkbox" onChange={HandleStockChange} className="form-check-input" /> Available
                       </dd>
                   </dl>
                   <button onClick={HandleRegisterClick} className="btn btn-primary w-100">Register</button>
                   </div>
                </div>
                <div className="col-9">
                   <h3>Product Details</h3>
                   <dl>
                       <dt>Name</dt>
                       <dd>{newProduct.Name}</dd>
                       <dt>Price</dt>
                       <dd>{newProduct.Price}</dd>
                       <dt>Shipped To</dt>
                       <dd>{newProduct.City}</dd>
                       <dt>Stock</dt>
                       <dd>{(newProduct.Stock===true)?"Available":"Out of Stock"}</dd>
                   </dl>
                </div>
            </div>
        </div>
    )
}






Ex: Dynamically changing style value


import { useState } from "react";


export default function StyleBindingComponent()
{
    const [backcolor, setBackColor] = useState('');
    const [textcolor, setTextColor] = useState('');
    const [alignment, setAlignment] = useState('');




    function HandleBackground(event){
        setBackColor(event.target.value);
    }


    function HandleTextColor(event){
        setTextColor(event.target.value);
    }


    function HandleAlignment(event){
        setAlignment(event.target.value);
    }


    return(
        <div className="container-fluid">
            <h3>Select Styles</h3>
            <dl>
                <dt>Background Color</dt>
                <dd>
                    <select onChange={HandleBackground}>
                      <option value='black'>Black</option>
                      <option value='red'>Red</option>
                      <option value='yellow'>Yellow</option>
                    </select>
                </dd>
                <dt>Text Color</dt>
                <dd>
                    <select onChange={HandleTextColor}>
                        <option value='white'>White</option>
                        <option value='red'>Red</option>
                        <option value='yellow'>Yellow</option>
                    </select>
                </dd>
                <dt>Alignment</dt>
                <dd>
                    <input onChange={HandleAlignment} type="radio" name="align" value='left' /> Left
                    <input onChange={HandleAlignment} type="radio" name="align" value='center' /> Center
                    <input onChange={HandleAlignment} type="radio" name="align" value='right' /> Right
                </dd>
            </dl>
            <h1 style={{backgroundColor:backcolor, color:textcolor, textAlign: alignment}}>Style Binding in React</h1>
        </div>
    )
}




            React Component Properties
            ======================
- Component is used to design re-usable custom templates.
- They contain sample design and values, which you can customize with final values.
- Component uses final values by using properties.
- Properties are required to design re-usable component.


Ex:
1. Add a new component file
"CardComponent.js"


export default function CardComponent(props){
    return(
        <div className="card w-25 m-2">
            <img src={props.Photo} alt="preview" height="200" className="card-img-top" />
            <div className="card-header" style={{height:'200px'}}>
                <p>{props.Name}</p>
                <p>{props.Price}</p>
            </div>
            <div className="card-footer">
                <button className="btn btn-danger w-100">
                    <span class="bi bi-cart4"></span> Add to Cart
                </button>
            </div>
        </div>
    )
}


2. PropertiesDemoComponent.js


import { useState } from "react"


import CardComponent from "./CardComponent";


export default function PropertiesDemoComponent()
{
       const [products] = useState([{Name:'JBL Speaker', Price: 4500.44, Photo: 'images/speaker.jpg'}, {Name:'Nike Casuals', Price: 6000.55, Photo: 'images/shoe.jpg'}]);


       return(
           <div className="container-fluid">
               <h2>Products Catalog</h2>
               <div className="d-flex flex-wrap">
                    {
                        products.map(product => 
                             <CardComponent Name={product.Name} Price={product.Price} Photo={product.Photo} />
                            )
                    }
               </div>
           </div>
       )
}




Component Hierarchy
- Parent and Child Hierarchy
- Transporting Data between Components
- Handling Events
- Consume API

Consuming API 
1. fetch()
2. jquery
3. 3rd party


Consume API using Fetch:
=====================
- fetch() is default window object method.
- It uses Ajax call to fetch data from API.
- It supports only GET.
- It will return data in Binary Format.
- We have to convert the data explicitly into JSON.




Syntax:
fetch("api url")
.then(response => response.json())
.then(data => { 
     store data, display data
})


Ex:   http://fakestoreapi.com 


FakestoreDemoComponent.js




import { useState, useEffect } from 'react';


export default function FetchDemoComponent(){


    const [categories, setCategories] = useState([]);
    const [products, setProducts] = useState([]);
    


    function LoadCategories(){
        fetch("http://fakestoreapi.com/products/categories&quot;)
        .then(response => response.json())
        .then(data => {
            data.unshift("All");
            setCategories(data);
        })
    }


    function LoadProducts(){
        fetch("http://fakestoreapi.com/products&quot;)
        .then(response=> response.json())
        .then(data => {
            setProducts(data);
        })
    }


    useEffect(()=> {
       LoadCategories();
       LoadProducts();
        
    },[])


    function HandleCategoryChange(e){
       if(e.target.value==='All') {
           LoadProducts();
       } else {
            fetch(`http://fakestoreapi.com/products/category/${e.target.value}`)
            .then(response => response.json())
            .then(data => {
                setProducts(data);
            })
       }
    }


    return(
        <div className="container-fluid">
            <h2 className="bg-danger p-2 text-white text-center"> <span className="bi bi-cart4"> </span> Amazon Shopping</h2>
            <div className="row">
                <div className="col-3">
                   <div>
                       <label>Select a Category</label>
                       <div>
                           <select onChange={HandleCategoryChange} className="form-select">
                               {
                                   categories.map(category => 
                                     <option value={category} key={category}>
                                         {category.toUpperCase()}
                                     </option>
                                    )
                               }
                           </select>
                       </div>
                   </div>
                </div>
                <div className="col-9" style={{overflow:'auto', height: '500px'}}>
                    <div className="d-flex flex-wrap">
                       {
                           products.map(product=> 
                             <div key={product.id} className="card m-2 w-25">
                                <img alt="preview" src={product.image} className="card-img-top" style={{height:'150px'}} />
                                <div className="card-header" style={{height:'120px'}}>
                                    {product.title}
                                </div>
                                <div className="card-body">
                                    <p>{product.price}</p>
                                </div>
                                <div className="card-footer">
                                   <button className="btn btn-danger w-100">
                                       <span className="bi bi-cart4"></span>
                                       Add to Cart
                                   </button>
                                </div>
                             </div>
                            
                            )
                       }
                    </div>
                </div>
            </div>
        </div>
    )
}


                          Consuming Using jQuery 
         ===================
- jquery provide Ajax methods to consume data from API.
- jquery supports all operations like GET, POST, PUT, DELETE
- jquery returns data in JSON format.
$.ajax()
$.getJSON()
- CORS issues [Cross Origin Resource Sharing]
- Injection issues
- Cross Page Posting 
- Request Forgery




 Ex:
import { useState, useEffect } from 'react';
import $ from 'jquery';


export default function JQueryDemoComponent()
{
    const [categories, setCategories] = useState([]);


    useEffect(()=> {
        $.ajax({
            method: 'GET',
            url: 'http://fakestoreapi.com/products/categories&#39;, 
            success: function(response){
                setCategories(response);
            }
        })
    },[])
    return(
        <div className="container-fluid">
            <h2>Select Category</h2>
            <select className="form-select">
                 {
                     categories.map(category =>
                         <option key={category}>
                            {category.toUpperCase()}
                         </option>
                        )
                 }
            </select>
        </div>
    )
}
